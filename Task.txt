Alternativa Platform <http://alternativaplatform.com/>

*Тестовое задание*

Необходимо реализовать простой серверный 3D движок MMO-игры  (без визуального представления).

Движок загружает трехмерную сцену и позволяет определять пересечение заданных лучей с геометрией (т.н. трассировка лучей). Сцена состоит из объектов, каждый из которых состоит из треугольных граней. Треугольники - двусторонние, то есть луч пересекается с треугольником с любой стороны.

Луч задается точкой и вектором направления, нужно определить пересечение луча  с первым объектом.

Предполагаемое количество объектов в сцене 1000 - 100 000, требуется эффективно трассировать большое количество лучей в реальном режиме времени. Под эффективностью понимается, в первую очередь, максимально короткие задержи между запросом и ответом (приоритет latency перед throughput).

Задается сцена в виде xml (прилагается xml-схема, примеры сцен).

Запущенный движок принимает на stdin строки вида (origin - координаты начала луча, direction - вектор направления, в общем случае ненормализованный):

rayId;originX,originY,originZ;directionX,directionY,directionZ

Пример:

1;1,-0.5,5;0,0,-1
2;1,1,1;1,1,1
3;-1,-0.5,5;0,0,-100

Результат выдается на stdout в виде:

rayId:objectName

Если пересечений нет, поле objectName не заполняется.

Пример вывода:

1:pyramid
2:
3:pyramid

Больше никакой информации в stdout выводиться не должно, т.к. предполагается, что слушать вывод будет какая-то другая программа. Ошибки выводятся в stderr, формат свободный.

Требуется решение на Java в виде запускаемого jar-файла, исходный код. На вход передается имя файла со сценой:

java -jar engine.jar scene.xml

Оцениваются алгоритм решения, производительность, качество исходного кода. Приветствуются unit-тесты, многопоточное решение, использование maven.

В прикрепленных файлах:

*scene.xsd* XML-схема

*example.xml* Пример простой сцены (одна пирамида)

*example2.xml* Сцена с 48 объектами
